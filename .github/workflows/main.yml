name: Rebuild and Deploy to DigitalOcean

on:
  workflow_dispatch:
    inputs:
      full_deploy:
        description: 'Full deployment (includes restarting all containers)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci --legacy-peer-deps || echo "Backend install failed but continuing"
          cd ../
          npm ci --legacy-peer-deps || echo "Frontend install failed but continuing"

  build-and-deploy:
    name: Build and Deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Create artifacts directory first
      - name: Create artifacts directory
        run: mkdir -p ./artifacts
      
      # Build Docker images directly without export
      - name: Build backend image
        run: |
          echo "Building backend image..."
          docker build -t ihsan/backend:latest -f Dockerfile.backend .
          
      - name: Build frontend image
        run: |
          echo "Building frontend image..."
          docker build -t ihsan/frontend:latest -f Dockerfile.frontend .
          
      - name: Save Docker images to files
        run: |
          docker save ihsan/backend:latest > ./artifacts/backend.tar
          docker save ihsan/frontend:latest > ./artifacts/frontend.tar
          ls -la ./artifacts/
      
      # Upload the built images to droplet
      - name: Upload Docker images
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "./artifacts/*.tar"
          target: "/opt/ihsan"
          strip_components: 1
      
      # Upload configuration files
      - name: Upload configuration files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          source: "docker-compose.prod.yml,nginx-prod.conf,.env.production"
          target: "/opt/ihsan"
          overwrite: true
      
      # Deploy images
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Check Docker installation
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              # Update package lists
              sudo apt-get update
              
              # Install requirements
              sudo apt-get install -y \
                apt-transport-https \
                ca-certificates \
                curl \
                gnupg \
                lsb-release
                
              # Add Docker's official GPG key
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              
              # Set up Docker repository
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              
              # Install Docker
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
              echo "Docker installed successfully"
            fi
            
            # Check Docker Compose installation
            if ! command -v docker-compose &> /dev/null; then
              echo "Docker Compose not found, installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo "Docker Compose installed successfully"
            fi
            
            # Navigate to app directory
            cd /opt/ihsan
            
            # Load Docker images
            echo "Loading Docker images..."
            docker load < backend.tar
            docker load < frontend.tar
            
            if [ "${{ github.event.inputs.full_deploy }}" == "true" ]; then
              # Full deployment - restart everything
              echo "Performing full deployment..."
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
            else
              # Targeted deployment - only restart specific containers
              echo "Performing targeted deployment..."
              docker-compose -f docker-compose.prod.yml up -d --no-deps backend
              docker-compose -f docker-compose.prod.yml up -d --no-deps frontend
            fi
            
            # Clean up tar files
            rm -f backend.tar frontend.tar
            
            echo "Deployment complete!"
